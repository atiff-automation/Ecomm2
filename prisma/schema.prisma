// JRM E-commerce Platform - Comprehensive Database Schema
// Malaysian E-commerce with Membership System & Bulk Operations

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== USER MANAGEMENT & AUTHENTICATION ====================

enum UserRole {
  CUSTOMER
  STAFF
  ADMIN
  SUPERADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  dateOfBirth   DateTime?
  role          UserRole   @default(CUSTOMER)
  status        UserStatus @default(PENDING_VERIFICATION)
  emailVerified DateTime?
  
  // Membership system
  isMember        Boolean   @default(false)
  memberSince     DateTime?
  membershipTotal Decimal   @default(0) @db.Decimal(10, 2)
  
  // Address information
  addresses Address[]
  
  // Relationships
  orders         Order[]
  reviews        Review[]
  wishlistItems  WishlistItem[]
  cartItems      CartItem[]
  auditLogs      AuditLog[]
  recentlyViewed RecentlyViewed[]
  importExportJobs ImportExportJob[]
  complianceReports ComplianceReport[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?
  
  @@map("users")
  @@index([email])
  @@index([role])
  @@index([status])
  @@index([isMember])
}

model Address {
  id           String  @id @default(cuid())
  userId       String
  type         String  // HOME, WORK, OTHER
  firstName    String
  lastName     String
  company      String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String  @default("Malaysia")
  phone        String?
  isDefault    Boolean @default(false)
  
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("addresses")
  @@index([userId])
  @@index([postalCode])
}

// ==================== PRODUCT MANAGEMENT ====================

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

model Category {
  id                   String    @id @default(cuid())
  name                 String
  slug                 String    @unique
  description          String?
  image                String?
  parentId             String?
  isQualifyingCategory Boolean   @default(false) // For membership qualification
  metaTitle            String?
  metaDescription      String?
  
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("categories")
  @@index([slug])
  @@index([parentId])
  @@index([isQualifyingCategory])
}

model Product {
  id              String        @id @default(cuid())
  name            String
  slug            String        @unique
  description     String?
  shortDescription String?
  sku             String        @unique
  barcode         String?
  status          ProductStatus @default(DRAFT)
  
  // Pricing - Dual pricing system for members
  regularPrice    Decimal @db.Decimal(10, 2)
  memberPrice     Decimal @db.Decimal(10, 2)
  costPrice       Decimal @db.Decimal(10, 2)
  
  // Inventory
  stockQuantity   Int     @default(0)
  lowStockAlert   Int     @default(10)
  weight          Decimal? @db.Decimal(8, 2)
  dimensions      String?  // "L x W x H"
  
  // SEO & Marketing
  metaTitle       String?
  metaDescription String?
  featured        Boolean @default(false)
  isPromotional   Boolean @default(false) // Excluded from membership calculation
  
  // Relationships
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  
  images        ProductImage[]
  variants      ProductVariant[]
  reviews       Review[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  recentlyViewed RecentlyViewed[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("products")
  @@index([slug])
  @@index([sku])
  @@index([categoryId])
  @@index([status])
  @@index([featured])
  @@index([isPromotional])
  @@index([regularPrice])
  @@index([memberPrice])
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  altText   String?
  sortOrder Int     @default(0)
  isPrimary Boolean @default(false)
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@map("product_images")
  @@index([productId])
  @@index([sortOrder])
}

model ProductVariant {
  id           String  @id @default(cuid())
  productId    String
  name         String  // Size, Color, etc.
  value        String  // Large, Red, etc.
  sku          String  @unique
  regularPrice Decimal @db.Decimal(10, 2)
  memberPrice  Decimal @db.Decimal(10, 2)
  stockQuantity Int    @default(0)
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("product_variants")
  @@index([productId])
  @@index([sku])
}

// ==================== SHOPPING & ORDERS ====================

model CartItem {
  id        String @id @default(cuid())
  userId    String
  productId String
  quantity  Int    @default(1)
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("cart_items")
  @@unique([userId, productId])
  @@index([userId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model Order {
  id       String @id @default(cuid())
  orderNumber String @unique // Format: ORD-YYYYMMDD-XXXX
  
  // Customer information
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  
  // Order status
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  
  // Pricing
  subtotal      Decimal @db.Decimal(10, 2)
  taxAmount     Decimal @db.Decimal(10, 2) @default(0)
  shippingCost  Decimal @db.Decimal(10, 2) @default(0)
  discountAmount Decimal @db.Decimal(10, 2) @default(0)
  total         Decimal @db.Decimal(10, 2)
  
  // Member benefits applied
  memberDiscount Decimal @db.Decimal(10, 2) @default(0)
  wasEligibleForMembership Boolean @default(false)
  
  // Addresses
  shippingAddressId String?
  billingAddressId  String?
  shippingAddress   Address? @relation(fields: [shippingAddressId], references: [id])
  
  // Payment & Shipping
  paymentMethod   String?    // BILLPLZ, BANK_TRANSFER, etc.
  paymentId       String?    // External payment ID
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  // Relationships
  orderItems OrderItem[]
  
  // Special notes
  customerNotes String?
  adminNotes    String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("orders")
  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([orderNumber])
  @@index([createdAt])
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  
  quantity      Int
  regularPrice  Decimal @db.Decimal(10, 2)
  memberPrice   Decimal @db.Decimal(10, 2)
  appliedPrice  Decimal @db.Decimal(10, 2) // Actual price paid
  totalPrice    Decimal @db.Decimal(10, 2)
  
  // Product snapshot at time of purchase
  productName   String
  productSku    String
  
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@map("order_items")
  @@index([orderId])
  @@index([productId])
}

// ==================== REVIEWS & ENGAGEMENT ====================

model Review {
  id        String  @id @default(cuid())
  userId    String
  productId String
  rating    Int     // 1-5 stars
  title     String?
  comment   String?
  isVerifiedPurchase Boolean @default(false)
  isApproved Boolean @default(false)
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("reviews")
  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
  @@index([isApproved])
}

model WishlistItem {
  id        String @id @default(cuid())
  userId    String
  productId String
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@map("wishlist_items")
  @@unique([userId, productId])
  @@index([userId])
}

model RecentlyViewed {
  id        String @id @default(cuid())
  userId    String
  productId String
  viewedAt  DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("recently_viewed")
  @@unique([userId, productId])
  @@index([userId])
  @@index([viewedAt])
}

// ==================== SYSTEM CONFIGURATION ====================

model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_config")
  @@index([key])
}

// ==================== AUDIT & LOGGING ====================

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PASSWORD_RESET
  MEMBERSHIP_GRANTED
  ORDER_PLACED
  PAYMENT_PROCESSED
  BULK_IMPORT
  BULK_EXPORT
  SYSTEM_CONFIG_CHANGE
  USER_STATUS_CHANGE
  MAINTENANCE_MODE_TOGGLE
  ERROR
}

model AuditLog {
  id        String      @id @default(cuid())
  userId    String?
  action    String      // Changed from AuditAction enum to String for flexibility
  resource  String      // table name or resource type
  resourceId String?    // ID of the affected resource
  details   Json?       // Combined old/new values and additional context
  ipAddress String?
  userAgent String?
  
  user User? @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
}

// ==================== BULK OPERATIONS & IMPORT/EXPORT ====================

enum ImportExportJobType {
  PRODUCT_IMPORT
  PRODUCT_EXPORT
  ORDER_EXPORT
  CUSTOMER_EXPORT
  INVENTORY_IMPORT
  INVENTORY_EXPORT
  TAX_REPORT
  FULFILLMENT_EXPORT
}

enum ImportExportJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

model ImportExportJob {
  id                 String                  @id @default(cuid())
  jobNumber          String                  @unique // Format: JOB-YYYYMMDD-XXXX
  type               ImportExportJobType
  status             ImportExportJobStatus   @default(PENDING)
  progressPercentage Int                     @default(0)  
  totalRecords       Int                     @default(0)
  processedRecords   Int                     @default(0)
  errorCount         Int                     @default(0)
  configuration      Json?                   // Job settings and parameters  
  errorLog           Json?                   // Detailed error information
  resultFileUrl      String?                 // Download URL for export results
  
  // User who started the job
  startedById String
  startedBy   User   @relation(fields: [startedById], references: [id])
  
  // Processing times
  startedAt   DateTime?
  completedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("import_export_jobs")
  @@index([startedById])
  @@index([status])
  @@index([type])
  @@index([createdAt])
}

// ==================== MALAYSIAN COMPLIANCE & TAX ====================

model TaxRate {
  id          String  @id @default(cuid())
  name        String  // SST, GST, Service Tax
  rate        Decimal @db.Decimal(5, 4) // 0.0600 for 6%
  isActive    Boolean @default(true)
  description String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("tax_rates")
  @@index([isActive])
}

model ComplianceReport {
  id           String    @id @default(cuid())
  reportType   String    // GST_MONTHLY, SST_QUARTERLY, SALES_SUMMARY  
  reportPeriod String    // YYYYMM or YYYYQQ
  reportData   Json      // Generated report content
  fileUrl      String?   // Download URL
  generatedById String
  generatedBy   User     @relation(fields: [generatedById], references: [id])
  
  createdAt DateTime @default(now())
  
  @@map("compliance_reports")
  @@index([reportType])
  @@index([reportPeriod])
  @@index([generatedById])
}

// Add the missing relation for ImportExportJob and ComplianceReport to User model
// This requires updating the User model to include these relationships
