generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                      @id @default(cuid())
  email                     String                      @unique
  password                  String
  firstName                 String
  lastName                  String
  phone                     String?
  dateOfBirth               DateTime?
  nric                      String?                     @unique @db.VarChar(12)
  role                      UserRole                    @default(CUSTOMER)
  status                    UserStatus                  @default(PENDING_VERIFICATION)
  emailVerified             DateTime?
  isMember                  Boolean                     @default(false)
  memberSince               DateTime?
  membershipTotal           Decimal                     @default(0) @db.Decimal(10, 2)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  lastLoginAt               DateTime?
  passwordResetToken        String?                     @unique
  passwordResetTokenExpiry  DateTime?
  addresses                 Address[]
  auditLogs                 AuditLog[]
  cartItems                 CartItem[]
  complianceReports         ComplianceReport[]
  discountCodesCreated      DiscountCode[]
  discountUsage             DiscountUsage[]
  heroSectionsCreated       HeroSection[]               @relation("HeroCreator")
  importExportJobs          ImportExportJob[]
  mediaUploads              MediaUpload[]               @relation("MediaUploader")
  referralsReceived         MemberReferral[]            @relation("ReferralsReceived")
  referralsMade             MemberReferral[]            @relation("ReferralsMade")
  notificationPreferences   NotificationPreference[]
  orders                    Order[]
  pendingMembership         PendingMembership?
  recentlyViewed            RecentlyViewed[]
  rewardsProcessed          ReferralReward[]            @relation("RewardsProcessed")
  referralRewards           ReferralReward[]
  referralSettings          ReferralSetting[]
  reviews                   Review[]
  siteCustomizationsCreated SiteCustomization[]         @relation("SiteCustomizationCreator")
  themesCreated             SiteTheme[]                 @relation("ThemeCreator")
  telegramConfig            TelegramConfig?
  wishlistItems             WishlistItem[]
  agentApplications         AgentApplication[]
  applicationReviews        AgentApplicationReview[]

  @@index([email])
  @@index([role])
  @@index([status])
  @@index([isMember])
  @@index([nric])
  @@map("users")
}

model PendingMembership {
  id               String   @id @default(cuid())
  userId           String   @unique
  orderId          String   @unique
  qualifyingAmount Decimal  @db.Decimal(10, 2)
  registrationData Json?
  expiresAt        DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  order            Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([orderId])
  @@index([expiresAt])
  @@map("pending_memberships")
}

model Address {
  id             String   @id @default(cuid())
  userId         String?
  type           String
  firstName      String
  lastName       String
  company        String?
  addressLine1   String
  addressLine2   String?
  city           String
  state          String
  postalCode     String
  country        String   @default("Malaysia")
  phone          String?
  isDefault      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingOrders  Order[]  @relation("BillingAddress")
  shippingOrders Order[]  @relation("ShippingAddress")

  @@index([userId])
  @@index([postalCode])
  @@map("addresses")
}

model Category {
  id              String            @id @default(cuid())
  name            String
  slug            String            @unique
  description     String?
  image           String?
  parentId        String?
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  parent          Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[]        @relation("CategoryHierarchy")
  products        ProductCategory[]

  @@index([slug])
  @@index([parentId])
  @@map("categories")
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
  @@map("product_categories")
}

model Product {
  id                        String            @id @default(cuid())
  name                      String
  slug                      String            @unique
  description               String?
  shortDescription          String?
  sku                       String            @unique
  barcode                   String?
  status                    ProductStatus     @default(DRAFT)
  regularPrice              Decimal           @db.Decimal(10, 2)
  memberPrice               Decimal           @db.Decimal(10, 2)
  promotionalPrice          Decimal?          @db.Decimal(10, 2)
  promotionStartDate        DateTime?
  promotionEndDate          DateTime?
  stockQuantity             Int               @default(0)
  lowStockAlert             Int               @default(10)
  weight                    Decimal           @db.Decimal(8, 2)
  metaTitle                 String?
  metaDescription           String?
  featured                  Boolean           @default(false)
  isPromotional             Boolean           @default(false)
  isQualifyingForMembership Boolean           @default(true)
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  earlyAccessStart          DateTime?
  memberOnlyUntil           DateTime?
  customsDescription        String?
  hsCode                    String?
  shippingClass             ShippingClass     @default(STANDARD)
  dimensions                Json?
  cartItems                 CartItem[]
  orderItems                OrderItem[]
  categories                ProductCategory[]
  images                    ProductImage[]
  variants                  ProductVariant[]
  recentlyViewed            RecentlyViewed[]
  reviews                   Review[]
  wishlistItems             WishlistItem[]

  @@index([slug])
  @@index([sku])
  @@index([status])
  @@index([featured])
  @@index([isPromotional])
  @@index([regularPrice])
  @@index([promotionStartDate])
  @@index([promotionEndDate])
  @@index([memberPrice])
  @@index([memberOnlyUntil])
  @@index([earlyAccessStart])
  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  altText   String?
  sortOrder Int      @default(0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([sortOrder])
  @@map("product_images")
}

model ProductVariant {
  id            String   @id @default(cuid())
  productId     String
  name          String
  value         String
  sku           String   @unique
  regularPrice  Decimal  @db.Decimal(10, 2)
  memberPrice   Decimal  @db.Decimal(10, 2)
  stockQuantity Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([sku])
  @@map("product_variants")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@map("cart_items")
}

model Order {
  id                       String             @id @default(cuid())
  orderNumber              String             @unique
  userId                   String?
  guestEmail               String?
  guestMembershipIntent    Json?
  status                   OrderStatus        @default(PENDING)
  paymentStatus            PaymentStatus      @default(PENDING)
  subtotal                 Decimal            @db.Decimal(10, 2)
  taxAmount                Decimal            @default(0) @db.Decimal(10, 2)
  shippingCost             Decimal            @default(0) @db.Decimal(10, 2)
  discountAmount           Decimal            @default(0) @db.Decimal(10, 2)
  total                    Decimal            @db.Decimal(10, 2)
  memberDiscount           Decimal            @default(0) @db.Decimal(10, 2)
  wasEligibleForMembership Boolean            @default(false)
  shippingAddressId        String?
  billingAddressId         String?
  paymentMethod            String?
  paymentId                String?
  trackingNumber           String?
  shippedAt                DateTime?
  deliveredAt              DateTime?
  customerNotes            String?
  adminNotes               String?
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  shippingPreferences      Json?
  toyyibpayBillCode        String?
  toyyibpayPaymentUrl      String?
  airwayBillGenerated      Boolean            @default(false)
  airwayBillGeneratedAt    DateTime?
  airwayBillUrl            String?
  trackingUrl              String?
  easyparcelOrderNumber    String?            // EasyParcel order number (e.g., "EI-12345")
  easyparcelPaymentStatus  String?            // Payment status (e.g., "Fully Paid")
  easyparcelParcelNumber   String?            // Parcel number (e.g., "EP-PQKTE")
  shippingCostCharged      Decimal?           @db.Decimal(10, 2) // Actual cost charged
  selectedCourierServiceId String?
  courierName              String?
  courierServiceType       String?            // 'parcel' or 'document'
  courierServiceDetail     String?            // 'pickup', 'dropoff', 'dropoff or pickup'
  selectedDropoffPointId   String?            // Dropoff point ID if applicable
  estimatedDelivery        String?
  shippingWeight           Decimal?           @db.Decimal(8, 2)
  scheduledPickupDate      DateTime?          @db.Date
  overriddenByAdmin        Boolean            @default(false)
  adminOverrideReason      String?            @db.Text
  failedBookingAttempts    Int                @default(0)
  lastBookingError         String?            @db.Text
  autoStatusUpdate         Boolean            @default(true)
  discountUsage            DiscountUsage[]
  orderItems               OrderItem[]
  billingAddress           Address?           @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress          Address?           @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  user                     User?              @relation(fields: [userId], references: [id])
  pendingMembership        PendingMembership?
  shipment                 Shipment?

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([orderNumber])
  @@index([createdAt])
  @@index([selectedCourierServiceId])
  @@index([trackingNumber])
  @@map("orders")
}

model Shipment {
  id                   String             @id @default(cuid())
  orderId              String             @unique
  easyParcelShipmentId String?            @unique
  trackingNumber       String?            @unique
  courierId            String
  courierName          String
  serviceName          String
  serviceType          String             // 'parcel' or 'document'
  serviceDetail        String             // 'pickup', 'dropoff', 'dropoff or pickup'
  selectedDropoffPoint Json?              // Dropoff point details if serviceDetail includes 'dropoff'
  pickupAddress        Json
  deliveryAddress      Json
  parcelDetails        Json
  originalPrice        Decimal            @db.Decimal(10, 2)
  finalPrice           Decimal            @db.Decimal(10, 2)
  insuranceAmount      Decimal?           @db.Decimal(10, 2)
  codAmount            Decimal?           @db.Decimal(10, 2)
  status               ShipmentStatus     @default(DRAFT)
  statusDescription    String?
  estimatedDelivery    DateTime?
  actualDelivery       DateTime?
  labelUrl             String?
  labelGenerated       Boolean            @default(false)
  pickupScheduled      Boolean            @default(false)
  pickupDate           DateTime?
  pickupTimeSlot       String?
  specialInstructions  String?
  signatureRequired    Boolean            @default(false)
  insuranceRequired    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  trackingEvents       ShipmentTracking[]
  order                Order              @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([easyParcelShipmentId])
  @@index([trackingNumber])
  @@index([status])
  @@index([courierId])
  @@map("shipments")
}

model ShipmentTracking {
  id          String   @id @default(cuid())
  shipmentId  String
  eventCode   String
  eventName   String
  description String
  location    String?
  eventTime   DateTime
  timezone    String   @default("Asia/Kuala_Lumpur")
  source      String   @default("EASYPARCEL")
  createdAt   DateTime @default(now())
  shipment    Shipment @relation(fields: [shipmentId], references: [id])

  @@index([shipmentId])
  @@index([eventCode])
  @@index([eventTime])
  @@map("shipment_tracking")
}

model OrderItem {
  id             String        @id @default(cuid())
  orderId        String
  productId      String
  quantity       Int
  regularPrice   Decimal       @db.Decimal(10, 2)
  memberPrice    Decimal       @db.Decimal(10, 2)
  appliedPrice   Decimal       @db.Decimal(10, 2)
  totalPrice     Decimal       @db.Decimal(10, 2)
  productName    String
  productSku     String
  discountCodeId String?
  createdAt      DateTime      @default(now())
  discountCode   DiscountCode? @relation(fields: [discountCodeId], references: [id])
  order          Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product       @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Review {
  id                 String   @id @default(cuid())
  userId             String
  productId          String
  rating             Int
  title              String?
  comment            String?
  isVerifiedPurchase Boolean  @default(false)
  isApproved         Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
  @@index([isApproved])
  @@map("reviews")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@map("wishlist_items")
}

model RecentlyViewed {
  id        String   @id @default(cuid())
  userId    String
  productId String
  viewedAt  DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([viewedAt])
  @@map("recently_viewed")
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@map("system_config")
}

model TelegramConfig {
  id                  String    @id @default(cuid())
  userId              String    @unique
  botToken            String?
  botUsername         String?
  ordersEnabled       Boolean   @default(false)
  ordersChatId        String?
  inventoryEnabled    Boolean   @default(false)
  inventoryChatId     String?
  dailySummaryEnabled Boolean   @default(false)
  summaryTime         String?
  timezone            String    @default("Asia/Kuala_Lumpur")
  verified            Boolean   @default(false)
  lastHealthCheck     DateTime?
  healthStatus        String    @default("UNKNOWN")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([verified])
  @@index([healthStatus])
  @@map("telegram_configs")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@map("audit_logs")
}

model ImportExportJob {
  id                 String                @id @default(cuid())
  jobNumber          String                @unique
  type               ImportExportJobType
  status             ImportExportJobStatus @default(PENDING)
  progressPercentage Int                   @default(0)
  totalRecords       Int                   @default(0)
  processedRecords   Int                   @default(0)
  errorCount         Int                   @default(0)
  configuration      Json?
  errorLog           Json?
  resultFileUrl      String?
  startedById        String
  startedAt          DateTime?
  completedAt        DateTime?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  startedBy          User                  @relation(fields: [startedById], references: [id])

  @@index([startedById])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@map("import_export_jobs")
}

model TaxRate {
  id          String   @id @default(cuid())
  name        String   @unique
  rate        Decimal  @db.Decimal(5, 4)
  isActive    Boolean  @default(true)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@map("tax_rates")
}

model ComplianceReport {
  id            String   @id @default(cuid())
  reportType    String
  reportPeriod  String
  reportData    Json
  fileUrl       String?
  generatedById String
  createdAt     DateTime @default(now())
  generatedBy   User     @relation(fields: [generatedById], references: [id])

  @@index([reportType])
  @@index([reportPeriod])
  @@index([generatedById])
  @@map("compliance_reports")
}

model DiscountCode {
  id                     String          @id @default(cuid())
  code                   String          @unique
  name                   String
  description            String?
  discountType           DiscountType
  discountValue          Decimal         @db.Decimal(10, 2)
  minimumOrderValue      Decimal?        @db.Decimal(10, 2)
  maximumDiscount        Decimal?        @db.Decimal(10, 2)
  usageLimit             Int?
  usageCount             Int             @default(0)
  perUserLimit           Int?
  memberOnly             Boolean         @default(false)
  applicableToCategories String[]
  applicableToProducts   String[]
  excludeCategories      String[]
  excludeProducts        String[]
  startsAt               DateTime
  expiresAt              DateTime?
  status                 DiscountStatus  @default(ACTIVE)
  isPublic               Boolean         @default(true)
  createdById            String
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  createdBy              User            @relation(fields: [createdById], references: [id])
  usageHistory           DiscountUsage[]
  orderItems             OrderItem[]

  @@index([code])
  @@index([status])
  @@index([memberOnly])
  @@index([startsAt])
  @@index([expiresAt])
  @@index([createdById])
  @@map("discount_codes")
}

model DiscountUsage {
  id             String       @id @default(cuid())
  discountCodeId String
  userId         String
  orderId        String
  discountAmount Decimal      @db.Decimal(10, 2)
  createdAt      DateTime     @default(now())
  discountCode   DiscountCode @relation(fields: [discountCodeId], references: [id], onDelete: Cascade)
  order          Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([discountCodeId, orderId])
  @@index([discountCodeId])
  @@index([userId])
  @@index([orderId])
  @@map("discount_usage")
}

model NotificationPreference {
  id               String                @id @default(cuid())
  userId           String
  notificationType NotificationType
  emailEnabled     Boolean               @default(true)
  smsEnabled       Boolean               @default(false)
  pushEnabled      Boolean               @default(true)
  inAppEnabled     Boolean               @default(true)
  frequency        NotificationFrequency @default(IMMEDIATE)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  user             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationType])
  @@index([userId])
  @@index([notificationType])
  @@map("notification_preferences")
}

model MemberReferral {
  id                   String              @id @default(cuid())
  referrerId           String
  referredId           String?
  referralCode         String              @unique
  referredEmail        String?
  status               ReferralStatus      @default(PENDING)
  referrerRewardType   ReferralRewardType?
  referrerRewardAmount Decimal?            @db.Decimal(10, 2)
  referrerRewardStatus RewardStatus        @default(PENDING)
  refereeRewardType    ReferralRewardType?
  referreeRewardAmount Decimal?            @db.Decimal(10, 2)
  refereeRewardStatus  RewardStatus        @default(PENDING)
  firstOrderDate       DateTime?
  firstOrderAmount     Decimal?            @db.Decimal(10, 2)
  totalOrderAmount     Decimal?            @default(0) @db.Decimal(15, 2)
  totalOrders          Int                 @default(0)
  referralDate         DateTime            @default(now())
  registeredDate       DateTime?
  rewardedDate         DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  referred             User?               @relation("ReferralsReceived", fields: [referredId], references: [id])
  referrer             User                @relation("ReferralsMade", fields: [referrerId], references: [id], onDelete: Cascade)
  rewards              ReferralReward[]

  @@index([referrerId])
  @@index([referredId])
  @@index([referralCode])
  @@index([status])
  @@index([referralDate])
  @@map("member_referrals")
}

model ReferralReward {
  id              String             @id @default(cuid())
  userId          String
  referralId      String
  rewardType      ReferralRewardType
  rewardAmount    Decimal            @db.Decimal(10, 2)
  status          RewardStatus       @default(PENDING)
  description     String?
  processedBy     String?
  processedAt     DateTime?
  expiresAt       DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  processedByUser User?              @relation("RewardsProcessed", fields: [processedBy], references: [id])
  referral        MemberReferral     @relation(fields: [referralId], references: [id], onDelete: Cascade)
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([referralId])
  @@index([status])
  @@index([expiresAt])
  @@map("referral_rewards")
}

model ReferralSetting {
  id                    String             @id @default(cuid())
  referrerRewardType    ReferralRewardType @default(DISCOUNT_CODE)
  referrerRewardAmount  Decimal            @default(10) @db.Decimal(10, 2)
  refereeRewardType     ReferralRewardType @default(DISCOUNT_CODE)
  refereeRewardAmount   Decimal            @default(10) @db.Decimal(10, 2)
  minimumOrderAmount    Decimal            @default(50) @db.Decimal(10, 2)
  rewardExpiryDays      Int                @default(30)
  maxReferralsPerMember Int?
  isActive              Boolean            @default(true)
  updatedBy             String
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  updatedByUser         User               @relation(fields: [updatedBy], references: [id])

  @@map("referral_settings")
}

model SiteTheme {
  id              String   @id @default(cuid())
  name            String   @default("Default Theme")
  primaryColor    String   @default("#3B82F6")
  secondaryColor  String   @default("#FDE047")
  backgroundColor String   @default("#F8FAFC")
  textColor       String   @default("#1E293B")
  logoUrl         String?
  logoWidth       Int      @default(120)
  logoHeight      Int      @default(40)
  faviconUrl      String?
  isActive        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?
  creator         User?    @relation("ThemeCreator", fields: [createdBy], references: [id])

  @@index([isActive])
  @@map("site_themes")
}

model HeroSection {
  id               String    @id @default(cuid())
  title            String    @default("Welcome to JRM E-commerce")
  subtitle         String    @default("Malaysia's premier online marketplace")
  description      String    @default("Intelligent membership benefits, dual pricing, and local payment integration.")
  ctaPrimaryText   String    @default("Join as Member")
  ctaPrimaryLink   String    @default("/auth/signup")
  ctaSecondaryText String    @default("Browse Products")
  ctaSecondaryLink String    @default("/products")
  backgroundType   MediaType @default(IMAGE)
  backgroundImage  String?
  backgroundVideo  String?
  overlayOpacity   Float     @default(0.1)
  textAlignment    String    @default("left")
  isActive         Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  createdBy        String?
  showCTA          Boolean   @default(true)
  showTitle        Boolean   @default(true)
  creator          User?     @relation("HeroCreator", fields: [createdBy], references: [id])

  @@map("hero_sections")
}

model MediaUpload {
  id           String    @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  mediaType    MediaType
  usage        String?
  uploadedBy   String?
  createdAt    DateTime  @default(now())
  uploader     User?     @relation("MediaUploader", fields: [uploadedBy], references: [id])

  @@map("media_uploads")
}

model SiteCustomization {
  id        String   @id @default(cuid())
  config    Json
  version   Int      @default(1)
  isActive  Boolean  @default(true)
  createdBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   User?    @relation("SiteCustomizationCreator", fields: [createdBy], references: [id])

  @@index([isActive])
  @@index([version])
  @@index([createdAt])
  @@map("site_customization")
}

model WebhookQueue {
  id             String        @id @default(cuid())
  trackingNumber String
  eventCode      String
  eventName      String
  eventTime      DateTime
  location       String?
  shipmentId     String
  payload        Json
  status         WebhookStatus @default(PENDING)
  retryCount     Int           @default(0)
  maxRetries     Int           @default(3)
  nextRetryAt    DateTime      @default(now())
  lastError      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  processedAt    DateTime?
  failedAt       DateTime?

  @@index([status])
  @@index([trackingNumber])
  @@index([nextRetryAt])
  @@index([createdAt])
  @@index([eventCode])
  @@map("webhook_queue")
}

model MalaysianState {
  id        String              @id @db.VarChar(3)
  name      String              @db.VarChar(100)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  postcodes MalaysianPostcode[]

  @@map("malaysian_states")
}

model MalaysianPostcode {
  id        String         @id @default(cuid())
  postcode  String         @db.VarChar(5)
  district  String         @db.VarChar(100)
  stateCode String         @db.VarChar(3)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  state     MalaysianState @relation(fields: [stateCode], references: [id])

  @@unique([postcode, district])
  @@index([postcode])
  @@index([district])
  @@index([stateCode])
  @@map("malaysian_postcodes")
}

model AdminTelegramConfig {
  id                    String   @id @default(cuid())
  botToken              String
  ordersChatId          String
  inventoryChatId       String?
  ordersEnabled         Boolean  @default(true)
  inventoryEnabled      Boolean  @default(true)
  dailySummaryEnabled   Boolean  @default(true)
  timezone              String   @default("Asia/Kuala_Lumpur")
  isActive              Boolean  @unique(map: "unique_active_admin_telegram_config") @default(true)
  createdBy             String?
  updatedBy             String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  chatManagementChatId  String?
  chatManagementEnabled Boolean  @default(true)
  systemAlertsChatId    String?
  systemAlertsEnabled   Boolean  @default(true)

  @@index([isActive])
  @@index([ordersEnabled])
  @@index([inventoryEnabled])
  @@index([chatManagementEnabled])
  @@index([systemAlertsEnabled])
  @@map("admin_telegram_config")
}

model BusinessProfile {
  id                    String                   @id @default(cuid())
  legalName             String
  tradingName           String?
  registrationNumber    String                   @unique
  taxRegistrationNumber String?
  businessType          String                   @default("SDN_BHD")
  registeredAddress     Json
  operationalAddress    Json?
  shippingAddress       Json?
  primaryPhone          String
  secondaryPhone        String?
  primaryEmail          String
  supportEmail          String?
  website               String?
  businessLicense       String?
  industryCode          String?
  establishedDate       DateTime?
  isActive              Boolean                  @default(true)
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  createdBy             String
  updatedBy             String?
  logoHeight            Int?                     @default(40)
  logoUrl               String?
  logoWidth             Int?                     @default(120)
  history               BusinessProfileHistory[]

  @@index([isActive])
  @@index([registrationNumber])
  @@index([taxRegistrationNumber])
  @@map("business_profile")
}

model BusinessProfileHistory {
  id                String          @id @default(cuid())
  businessProfileId String
  operation         String
  oldValues         Json?
  newValues         Json
  changedBy         String
  changeReason      String?
  createdAt         DateTime        @default(now())
  businessProfile   BusinessProfile @relation(fields: [businessProfileId], references: [id], onDelete: Cascade)

  @@index([businessProfileId, createdAt])
  @@index([operation])
  @@index([changedBy])
  @@map("business_profile_history")
}

model TaxConfiguration {
  id                  String    @id @default(cuid())
  gstRegistered       Boolean   @default(false)
  gstNumber           String?   @unique
  sstRegistered       Boolean   @default(false)
  sstNumber           String?   @unique
  defaultGstRate      Decimal   @default(0) @db.Decimal(5, 4)
  defaultSstRate      Decimal   @default(0) @db.Decimal(5, 4)
  taxInclusivePricing Boolean   @default(true)
  autoCalculateTax    Boolean   @default(true)
  isActive            Boolean   @default(true)
  effectiveFrom       DateTime  @default(now())
  effectiveTo         DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  updatedBy           String

  @@index([isActive])
  @@index([gstRegistered])
  @@index([sstRegistered])
  @@index([effectiveFrom, effectiveTo])
  @@map("tax_configuration")
}

model ReceiptTemplate {
  id              String              @id @default(cuid())
  name            String
  description     String?
  templateType    ReceiptTemplateType
  templateContent Json
  isDefault       Boolean             @default(false)
  isActive        Boolean             @default(true)
  previewImage    String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  createdBy       String
  updatedBy       String?

  @@index([templateType])
  @@index([isDefault, isActive])
  @@map("receipt_templates")
}


model NotificationLog {
  id               String   @id @default(cuid())
  timestamp        DateTime @default(now())
  level            String
  event            String
  channel          String
  userId           String?
  notificationId   String?
  message          String
  metadata         String?
  duration         Int?
  errorName        String?
  errorMessage     String?
  errorStack       String?
  errorCode        String?
  contextIp        String?
  contextUserAgent String?
  contextEndpoint  String?
  contextSessionId String?
  createdAt        DateTime @default(now())

  @@index([timestamp])
  @@index([level])
  @@index([event])
  @@index([channel])
  @@index([userId])
  @@index([notificationId])
  @@index([errorMessage])
  @@map("notification_logs")
}

model FailedNotification {
  id               String    @id @default(cuid())
  type             String
  payload          String
  recipient        String
  channel          String
  failureReason    String
  stackTrace       String?
  retryCount       Int       @default(0)
  nextRetryAt      DateTime?
  metadata         String?
  createdAt        DateTime  @default(now())
  lastAttemptAt    DateTime  @default(now())
  resolvedAt       DateTime?
  permanentFailure Boolean   @default(false)

  @@index([nextRetryAt])
  @@index([retryCount])
  @@index([channel])
  @@index([permanentFailure])
  @@index([resolvedAt])
  @@index([createdAt])
  @@map("failed_notifications")
}


enum UserRole {
  CUSTOMER
  STAFF
  ADMIN
  SUPERADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

enum ShippingClass {
  STANDARD
  FRAGILE
  HAZARDOUS
}

enum OrderStatus {
  PENDING
  PAID
  READY_TO_SHIP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum ShipmentStatus {
  DRAFT
  RATE_CALCULATED
  BOOKED
  LABEL_GENERATED
  PICKUP_SCHEDULED
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  CANCELLED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PASSWORD_RESET
  MEMBERSHIP_GRANTED
  ORDER_PLACED
  PAYMENT_PROCESSED
  BULK_IMPORT
  BULK_EXPORT
  SYSTEM_CONFIG_CHANGE
  USER_STATUS_CHANGE
  MAINTENANCE_MODE_TOGGLE
  ERROR
}

enum ImportExportJobType {
  PRODUCT_IMPORT
  PRODUCT_EXPORT
  ORDER_EXPORT
  CUSTOMER_EXPORT
  INVENTORY_IMPORT
  INVENTORY_EXPORT
  TAX_REPORT
  FULFILLMENT_EXPORT
}

enum ImportExportJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  BUY_X_GET_Y
}

enum DiscountStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  USED_UP
}

enum NotificationType {
  ORDER_CONFIRMATION
  ORDER_STATUS_UPDATE
  SHIPPING_UPDATE
  DELIVERY_UPDATE
  PAYMENT_CONFIRMATION
  PROMOTIONAL_OFFERS
  MEMBER_BENEFITS
  STOCK_ALERTS
  PRICE_DROP_ALERTS
  NEW_ARRIVALS
  NEWSLETTER
  SYSTEM_UPDATES
}

enum NotificationFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
  MONTHLY
}

enum ReferralStatus {
  PENDING
  REGISTERED
  COMPLETED
  EXPIRED
  CANCELLED
}

enum ReferralRewardType {
  DISCOUNT_CODE
  STORE_CREDIT
  CASH_REWARD
  FREE_SHIPPING
  PRODUCT_DISCOUNT
}

enum RewardStatus {
  PENDING
  ISSUED
  USED
  EXPIRED
  CANCELLED
}

enum MediaType {
  IMAGE
  VIDEO
}

enum WebhookStatus {
  PENDING
  RETRY
  PROCESSED
  FAILED
}

enum ReceiptTemplateType {
  THERMAL_RECEIPT
  BUSINESS_INVOICE
  MINIMAL_RECEIPT
  DETAILED_INVOICE
}

// Agent Application System Models
model AgentApplication {
  id                String                 @id @default(cuid())
  userId            String?
  email             String
  status            AgentApplicationStatus @default(DRAFT)

  // Step 1: Terms accepted
  acceptTerms       Boolean                @default(false)

  // Step 2: Basic Information
  fullName          String
  icNumber          String
  phoneNumber       String
  address           String
  age               Int

  // Business Experience
  hasBusinessExp    Boolean
  businessLocation  String?
  hasTeamLeadExp    Boolean
  isRegistered      Boolean
  jenis             BusinessType

  // Step 3: Social Media
  instagramHandle   String?
  facebookHandle    String?
  tiktokHandle      String?
  instagramLevel    SocialMediaLevel       @default(TIDAK_MAHIR)
  facebookLevel     SocialMediaLevel       @default(TIDAK_MAHIR)
  tiktokLevel       SocialMediaLevel       @default(TIDAK_MAHIR)

  // Step 4: Additional Information
  hasJrmExp         Boolean
  jrmProducts       String?
  reasonToJoin      String
  expectations      String

  // System Fields
  submittedAt       DateTime?
  reviewedAt        DateTime?
  reviewedBy        String?
  adminNotes        String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt

  // Relations
  user              User?                  @relation(fields: [userId], references: [id])
  reviews           AgentApplicationReview[]

  @@index([email])
  @@index([status])
  @@index([submittedAt])
  @@index([userId])
  @@map("agent_applications")
}

model AgentApplicationReview {
  id             String              @id @default(cuid())
  applicationId  String
  reviewerId     String
  decision       ApplicationDecision
  notes          String?
  createdAt      DateTime            @default(now())

  application    AgentApplication    @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  reviewer       User               @relation(fields: [reviewerId], references: [id])

  @@map("agent_application_reviews")
}

enum AgentApplicationMalaysianState {
  JOHOR
  KEDAH
  KELANTAN
  KUALA_LUMPUR
  LABUAN
  MELAKA
  NEGERI_SEMBILAN
  PAHANG
  PENANG
  PERAK
  PERLIS
  PUTRAJAYA
  SABAH
  SARAWAK
  SELANGOR
  TERENGGANU
}

enum AgentApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  INTERVIEW_SCHEDULED
  WITHDRAWN
}

enum SocialMediaLevel {
  TIDAK_MAHIR
  MAHIR
  SANGAT_MAHIR
}

enum ApplicationDecision {
  APPROVED
  REJECTED
  NEEDS_MORE_INFO
}

enum EducationLevel {
  SPM
  STPM
  DIPLOMA
  DEGREE
  OTHERS
}

enum EmploymentStatus {
  EMPLOYED
  SELF_EMPLOYED
  UNEMPLOYED
  STUDENT
  RETIRED
}

enum FollowersRange {
  RANGE_0_100
  RANGE_100_1K
  RANGE_1K_10K
  RANGE_10K_PLUS
}

enum HoursRange {
  RANGE_5_10
  RANGE_10_20
  RANGE_20_30
  RANGE_30_PLUS
}

enum IncomeGoal {
  RANGE_500_1000
  RANGE_1000_3000
  RANGE_3000_5000
  RANGE_5000_PLUS
}

enum OpportunityType {
  FULL_TIME
  PART_TIME
  SIDE_HUSTLE
}

enum PostingFrequency {
  DAILY
  WEEKLY
  MONTHLY
  RARELY
}

enum ReferralSource {
  SOCIAL_MEDIA
  FRIEND
  JRM_AGENT
  ONLINE_AD
  OTHERS
}

enum BusinessType {
  KEDAI
  MUDAH
  TIDAK_BERKAITAN
  LAIN_LAIN
}
